#!/usr/bin/env perl
# Copyright (c) 2010-2012, Maximilian Ga√ü <mxey@mxey.net>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use Config::Tiny;
use Email::Simple;
use File::Slurp;
use IO::Handle;
use Net::LDAP;
use Sys::Syslog;

sub check_ldap {
    my ($mesg) = @_;
    if ( $mesg->code() ) {
        die 'LDAP error: ' . $mesg->error();
    }
}

if ( @ARGV != 2 ) {
    STDERR->print("Usage: miniml CONFIG_FILE LISTNAME\n");
    exit 1;
}

my $cfg      = Config::Tiny->read( shift @ARGV ) or die Config::Tiny::errstr();
my $listname = shift @ARGV;
my $in       = read_file( \*STDIN );
my $email    = Email::Simple->new( $in  );
my $ldap     = Net::LDAP->new( $cfg->{'_'}->{'ldapserver'} );
check_ldap( $ldap->bind() );

$email->header_set(
    'List-Id' => sprintf( 'CCCD %s <%s.%s>',
        ucfirst($listname), $listname, $cfg->{'_'}->{'domain'} )
);
$email->header_set( 'List-Post' =>
      sprintf( '<mailto:%s@%s>', $listname, $cfg->{'_'}->{'domain'} ) );

if ($listname eq 'intern') {
    $email->header_set( 'Reply-To' =>
          sprintf( '%s@%s', $listname, $cfg->{'_'}->{'domain'} ) );
}

my $mesg = $ldap->search(
    base   => $cfg->{'_'}->{'ldapbase'},
    filter => sprintf( '(cn=' . $cfg->{'_'}->{'groupfmt'} . ')', $listname ),
);
check_ldap($mesg);

my $group = $mesg->entry(0);
if ( not $group ) {
    die "No such list: $listname";
}

my $out = $email->as_string();

my $id = $email->header('Message-Id');

foreach ( $group->get_value('memberUid') ) {
    open(
        my $sendmail,
        '|-',
        sprintf(
            '/usr/sbin/sendmail -i -f %s %s\@%s',
            $cfg->{'_'}->{'returnpath'},
            $_, $cfg->{'_'}->{'domain'}
        )
    ) or die $!;
    print $sendmail $out;
    close($sendmail);
}

$ldap->unbind();
